# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Dropdown tests >> Verify header text
- Location: /home/runner/work/HerokuAppPlaywright/HerokuAppPlaywright/tests/dropdown.spec.js:22:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import DropdownPage from '../pages/dropdown.page';
   3 |
   4 | test.describe('Dropdown tests', () => {
   5 |     /** @type {DropdownPage} */
   6 |     let dropdownPage;
   7 |
   8 |     test.beforeAll(async ({ browser }) => {
   9 |         const page = await browser.newPage();
  10 |         dropdownPage = new DropdownPage(page);
  11 |     })
  12 |
  13 |     test.beforeEach(async () => {
  14 |         try {
  15 |             await dropdownPage.goto();
  16 |         } catch (error) {
  17 |             console.log('Error during navigation', error);
  18 |             throw error;
  19 |         }
  20 |     })
  21 |
> 22 |     test('Verify header text', async () => {
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
  23 |         const headingText = await dropdownPage.getHeaderText();
  24 |         expect(headingText).toContain('Dropdown List');
  25 |     });
  26 |
  27 |     test('should have "Please select an option" as default', async () => {
  28 |         const defaultOption = await dropdownPage.getSelectedOption();
  29 |         expect(defaultOption).toBe('');
  30 |     });
  31 |
  32 |     test('should select an option from the dropdown', async () => {
  33 |         await dropdownPage.selectOptionByValue('1');
  34 |         expect(await dropdownPage.getSelectedOption()).toBe('1');
  35 |
  36 |         await dropdownPage.selectOptionByValue('2');
  37 |         expect(await dropdownPage.getSelectedOption()).toBe('2');
  38 |     })
  39 |
  40 |     test('should verify available options', async () => {
  41 |         const options = await dropdownPage.getSelectedOptions();
  42 |         expect(options).toEqual(['Please select an option', 'Option 1', 'Option 2']);
  43 |     });
  44 |
  45 |     test('should not change selection for invalid option', async () => {
  46 |         try {
  47 |             await dropdownPage.selectOptionByValue('3');
  48 |         }
  49 |         catch (error) {
  50 |             console.log("Expected error: trying to select am invalid option that does not exist!!");
  51 |         }
  52 |         expect(await dropdownPage.getSelectedOption()).not.toBe('3');
  53 |     });
  54 |
  55 |     test('should check if dropdown is visible and enabled', async () => {
  56 |         expect(await dropdownPage.isDropdownEnabled()).toBeTruthy();
  57 |         expect(await dropdownPage.isDropdownVisible()).toBeTruthy();
  58 |     })
  59 |
  60 |     test('should select option by visible text', async () => {
  61 |         await dropdownPage.selectOptionByLabel('Option 1');
  62 |         expect(await dropdownPage.getSelectedOption()).toBe('1');
  63 |     })
  64 |
  65 |     test('should verify that default option is disabled', async () => {
  66 |         expect(await dropdownPage.isOptionDisabled("")).toBeTruthy();
  67 |     });
  68 |
  69 |     test.afterAll(async () => {
  70 |         await dropdownPage.page.close();
  71 |     })
  72 | })
```