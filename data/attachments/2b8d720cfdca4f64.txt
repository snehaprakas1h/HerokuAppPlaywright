# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Dynamic and static content tests >> Verify the header text
- Location: /home/runner/work/HerokuAppPlaywright/HerokuAppPlaywright/tests/dynamic-content-with-static.spec.js:24:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import DynamicContentWithStaticContentPage from '../pages/dynamic-content-with-static-content.page';
   3 | import exp from 'constants';
   4 |
   5 | test.describe('Dynamic and static content tests', async () => {
   6 |
   7 |     /**@type {DynamicContentWithStaticContentPage} */
   8 |     let dynamicContentWithStaticContentPage;
   9 |
  10 |     test.beforeAll(async ({ browser }) => {
  11 |         const page = await browser.newPage();
  12 |         dynamicContentWithStaticContentPage = new DynamicContentWithStaticContentPage(page);
  13 |     });
  14 |
  15 |     test.beforeEach(async () => {
  16 |         try {
  17 |             await dynamicContentWithStaticContentPage.goto();
  18 |         } catch (error) {
  19 |             console.log('Error during navigation', error);
  20 |             throw error;
  21 |         }
  22 |     });
  23 |
> 24 |     test('Verify the header text', async () => {
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
  25 |         const headerText = await dynamicContentWithStaticContentPage.getHeaderText();
  26 |         expect(headerText).toBe('Dynamic Content');
  27 |     });
  28 |
  29 |     test('Verify body text', async () => {
  30 |         const bodyText = await dynamicContentWithStaticContentPage.getBodyText();
  31 |         expect(bodyText).toContain('new text and images');
  32 |     });
  33 |
  34 |     test('Verify body text with static link', async () => {
  35 |         expect(await dynamicContentWithStaticContentPage.getStaticLink).toBeTruthy();
  36 |     })
  37 |
  38 |     test('Verify dynamic content remains changed', async () => {
  39 |
  40 |         const expectedText = await dynamicContentWithStaticContentPage.getTextContent(0);
  41 |         const expectedText2 = await dynamicContentWithStaticContentPage.getTextContent(1);
  42 |
  43 |         await dynamicContentWithStaticContentPage.gotoStaticContent();
  44 |
  45 |         const actualText = await dynamicContentWithStaticContentPage.getTextContent(0);
  46 |         const actualText1 = await dynamicContentWithStaticContentPage.getTextContent(1);
  47 |
  48 |         expect(actualText).not.toContain(expectedText);
  49 |         expect(actualText1).not.toContain(expectedText2);
  50 |     });
  51 |
  52 |     test('verify static content remains unchanged', async () => {
  53 |         const bodyTextExpected = await dynamicContentWithStaticContentPage.getBodyText();
  54 |         const bodyTextStaticExpected = await dynamicContentWithStaticContentPage.getStaticBodyText();
  55 |
  56 |         await dynamicContentWithStaticContentPage.gotoStaticContent();
  57 |
  58 |         const bodyTextActual = await dynamicContentWithStaticContentPage.getBodyText();
  59 |         const bodyTextStaticActual = await dynamicContentWithStaticContentPage.getStaticBodyText();
  60 |
  61 |
  62 |         expect(bodyTextActual).toEqual(bodyTextExpected);
  63 |         expect(bodyTextStaticActual).toEqual(bodyTextStaticExpected);
  64 |     });
  65 |
  66 |     test('Verify text changes after reload', async () => {
  67 |         const initialText = await dynamicContentWithStaticContentPage.getTextContent(0);
  68 |         await dynamicContentWithStaticContentPage.reloadPage();
  69 |         const updatedText = await dynamicContentWithStaticContentPage.getTextContent(0);
  70 |
  71 |         expect(updatedText).not.toBe(initialText);
  72 |     })
  73 |
  74 |     test('Verify all blocks changes after reload', async () => {
  75 |         const initialTextBlocks = await dynamicContentWithStaticContentPage.getAllTextContents();
  76 |         await dynamicContentWithStaticContentPage.reloadPage();
  77 |         const updatedTextBlocks = await dynamicContentWithStaticContentPage.getAllTextContents();
  78 |
  79 |         expect(updatedTextBlocks).not.toBe(initialTextBlocks);
  80 |     });
  81 |
  82 |     test('Verify images change on page reload', async () => {
  83 |         const initialImages = await dynamicContentWithStaticContentPage.getAllImageSources();
  84 |         await dynamicContentWithStaticContentPage.reloadPage();
  85 |         const updatedImages = await dynamicContentWithStaticContentPage.getAllImageSources();
  86 |         expect(updatedImages).not.toEqual(initialImages);
  87 |     });
  88 |
  89 |     test('Verify page contains exactly 3 content blocks',async()=>{
  90 |         const count = await dynamicContentWithStaticContentPage.getTextBlocks();
  91 |         expect(count-1).toBe(3);
  92 |     })
  93 |
  94 |
  95 | })
```