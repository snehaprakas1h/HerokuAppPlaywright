# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Challenging DOM Page >> Verify page title and structure
- Location: /home/runner/work/HerokuAppPlaywright/HerokuAppPlaywright/tests/challenging-dom.spec.js:22:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import ChallengingDOMPage from '../pages/challenging-dom.page';
   3 |
   4 | test.describe('Challenging DOM Page', () => {
   5 |     /**@type {ChallengingDOMPage} */
   6 |     let challengingDOMPage;
   7 |
   8 |     test.beforeAll(async ({ browser }) => {
   9 |         const page = await browser.newPage();
   10 |         challengingDOMPage = new ChallengingDOMPage(page);
   11 |     })
   12 |
   13 |     test.beforeEach(async () => {
   14 |         try {
   15 |             await challengingDOMPage.goto();
   16 |         } catch (error) {
   17 |             console.error('Error during Navigation', error);
   18 |             throw error;
   19 |         }
   20 |     })
   21 |
>  22 |     test('Verify page title and structure', async () => {
      |     ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
   23 |         // Verify heading
   24 |         const headingText = await challengingDOMPage.getHeadingText();
   25 |         expect(headingText).toBe('Challenging DOM');
   26 |
   27 |         // Verify body text
   28 |         const bodyText = await challengingDOMPage.getBodyText();
   29 |         expect(bodyText).toContain('example demonstrates that with unique');
   30 |     })
   31 |
   32 |     test('Verify colored buttons are present and clickable', async () => {
   33 |         // Store the button text before clicking
   34 |         const blueButtonTextBefore = await challengingDOMPage.getBlueButtonText();
   35 |         const redButtonTextBefore = await challengingDOMPage.getRedButtonText();
   36 |         const greenButtonTextBefore = await challengingDOMPage.getGreenButtonText();
   37 |
   38 |         // Click blue button and verify page updated
   39 |         await challengingDOMPage.clickBlueButton();
   40 |         await expect.poll(async () => {
   41 |             return await challengingDOMPage.getBlueButtonText();
   42 |         }).not.toEqual(blueButtonTextBefore);
   43 |
   44 |         // Click red button and verify page updated
   45 |         await challengingDOMPage.clickRedButton();
   46 |         await expect.poll(async () => {
   47 |             return await challengingDOMPage.getRedButtonText();
   48 |         }).not.toEqual(redButtonTextBefore);
   49 |
   50 |         // Click green button and verify page updated
   51 |         await challengingDOMPage.clickGreenButton();
   52 |         await expect.poll(async () => {
   53 |             return await challengingDOMPage.getGreenButtonText();
   54 |         }).not.toEqual(greenButtonTextBefore);
   55 |     });
   56 |
   57 |     test('Verify table structure and content', async () => {
   58 |         // Check table headers
   59 |         const headers = await challengingDOMPage.getTableHeadersText();
   60 |         expect(headers).toEqual(['Lorem', 'Ipsum', 'Dolor', 'Sit', 'Amet', 'Diceret', 'Action']);
   61 |
   62 |         // Verify table has 10 rows
   63 |         const rowCount = await challengingDOMPage.getRowCount();
   64 |         expect(rowCount).toEqual(10);
   65 |
   66 |         // Verify content of first row, first cell
   67 |         const firstCellText = await challengingDOMPage.getCellText(0, 0);
   68 |         expect(firstCellText).not.toBe("");
   69 |     });
   70 |
   71 |     test('Verify edit and delete links', async () => {
   72 |
   73 |         const page = await challengingDOMPage.page;
   74 |
   75 |         await challengingDOMPage.clickEditLink(0);
   76 |         await page.waitForLoadState('networkidle');
   77 |
   78 |         console.log('Current URL:', await page.url());
   79 |
   80 |         await expect(page).toHaveURL(/#edit/);
   81 |
   82 |         await page.reload();
   83 |
   84 |         await challengingDOMPage.clickDeleteLink(0);
   85 |         await page.waitForLoadState('networkidle');
   86 |
   87 |         console.log('Current URL:', await page.url());
   88 |         await expect(page).toHaveURL(/#delete/); // Use Playwright's built-in URL assertion
   89 |     });
   90 |
   91 |     test('Verify canvas element properties', async () => {
   92 |         const canvasProps = await challengingDOMPage.getCanvasProperties();
   93 |         expect(canvasProps.id).toBe('canvas');
   94 |         expect(canvasProps.width).toBeGreaterThan(0);
   95 |         expect(canvasProps.height).toBeGreaterThan(0);
   96 |     });
   97 |
   98 |     test.skip('Canvas content changes when buttons are clicked', async () => {
   99 |         const canvasSelector = '#canvas';
  100 |
  101 |         // Ensure the canvas is present
  102 |         await challengingDOMPage.page.waitForSelector(canvasSelector);
  103 |
  104 |         // Capture screenshot before click
  105 |         await challengingDOMPage.page.screenshot({ path: 'canvas_before_click.png' });
  106 |
  107 |         // Get canvas image data before click
  108 |         const beforeImageData = await challengingDOMPage.page.evaluate(() => {
  109 |             const canvas = document.querySelector('#canvas'); // Use the selector directly
  110 |             if (!canvas) return null;
  111 |             const ctx = canvas.getContext('2d');
  112 |             return JSON.stringify(Array.from(ctx.getImageData(0, 0, 100, 100).data)); // Convert to JSON string
  113 |         });
  114 |
  115 |         console.log("Before Image Data:", beforeImageData.slice(0, 50)); // Log a sample
  116 |
  117 |         // Click a button
  118 |         await challengingDOMPage.clickBlueButton();
  119 |
  120 |         // Wait until the canvas content updates
  121 |         await challengingDOMPage.page.waitForFunction((beforeDataString) => {
  122 |             const canvas = document.querySelector('#canvas'); // Use the selector directly
```