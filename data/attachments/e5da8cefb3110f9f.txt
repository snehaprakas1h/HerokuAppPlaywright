# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify Digest Auth >> Verify the heading
- Location: /home/runner/work/HerokuAppPlaywright/HerokuAppPlaywright/tests/digest-auth.spec.js:23:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import DigestAuthPage from '../pages/digest-auth.page';
   3 |
   4 |
   5 | test.describe('Verify Digest Auth', () => {
   6 |     /** @type {DigestAuthPage} */
   7 |     let digestAuthPage;
   8 |
   9 |     test.beforeAll(async ({ browser }) => {
  10 |         const page = await browser.newPage();
  11 |         digestAuthPage = new DigestAuthPage(page);
  12 |     })
  13 |
  14 |     test.beforeEach(async () => {
  15 |         try {
  16 |             digestAuthPage.goto();
  17 |         } catch (error) {
  18 |             console.log('Error during navigation', error);
  19 |             throw error;
  20 |         }
  21 |     })
  22 |
> 23 |     test('Verify the heading',async()=>{
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
  24 |         const headingText = await digestAuthPage.getHeadingText();
  25 |         expect(headingText).toMatch('Digest Auth');
  26 |     });
  27 |
  28 |     test('Verify the body text',async()=>{
  29 |         const bodyText = await digestAuthPage.getBodyText();
  30 |         expect(bodyText).toContain('Congratulations!');
  31 |     });
  32 |
  33 |     test.afterAll(async () => {
  34 |         await digestAuthPage.page.close();
  35 |     })
  36 | })
```