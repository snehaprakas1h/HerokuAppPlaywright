# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Add and remove test page >> Verify "Add and remove elements" heading is displayed correctly
- Location: /home/runner/work/HerokuAppPlaywright/HerokuAppPlaywright/tests/add-and-remove-elements.spec.js:24:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | /// <reference types="playwright" />
   2 |
   3 | import { test, expect } from '@playwright/test';
   4 | import AddAndRenameTest from '../pages/add-and-rename-test.page';
   5 |
   6 | test.describe('Add and remove test page', () => {
   7 |     /**@type{AddAndRenameTest} */
   8 |     let addAndRenameTest;
   9 |
  10 |     test.beforeAll(async ({ browser }) => {
  11 |         const page = await browser.newPage();
  12 |         addAndRenameTest = new AddAndRenameTest(page);
  13 |     })
  14 |
  15 |     test.beforeEach(async () => {
  16 |         try {
  17 |             await addAndRenameTest.goto();
  18 |         } catch (error) {
  19 |             console.error('Error during navigation:', error);
  20 |             throw error;
  21 |         }
  22 |     });
  23 |
> 24 |     test('Verify "Add and remove elements" heading is displayed correctly', async () => {
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/chromium_headless_shell-1161/chrome-linux/headless_shell
  25 |         const headingText = await addAndRenameTest.getHeadingText();
  26 |         expect(headingText).toBe('Add/Remove Elements');
  27 |     });
  28 |
  29 |     test('Verify the "Add Element" button can be clicked and "Delete" button becomes visible', async () => {
  30 |         expect(await addAndRenameTest.isAddElementButtonVisible()).toBeTruthy();
  31 |         await addAndRenameTest.clickAddElementButton();
  32 |         expect(await addAndRenameTest.getAddElementButton()).not.toBeDisabled();
  33 |         expect(await addAndRenameTest.isDeleteButtonVisible()).toBeTruthy();
  34 |         await addAndRenameTest.clickDeleteButton();
  35 |         expect(await addAndRenameTest.isDeleteButtonVisible()).toBeFalsy();
  36 |     });
  37 |
  38 |     test('Verify the "Delete" button can be clicked and is hidden afterward', async () => {
  39 |
  40 |         // Click the Add Element button multiple times
  41 |         const numberOfClicks = 4;
  42 |         for (let i = 0; i < numberOfClicks; i++) {
  43 |             await addAndRenameTest.clickAddElementButton();
  44 |             await addAndRenameTest.page.waitForTimeout(200);
  45 |         }
  46 |
  47 |
  48 |         // const deleteButtons = await addAndRenameTest.page.getByText('Delete').all();
  49 |         // let deleteButtonsCount = 0;
  50 |         // for (let i = 0; i < deleteButtons.length; i++) {
  51 |         //     const buttonText = await deleteButtons[i].textContent();
  52 |         //     if (buttonText === 'Delete') {
  53 |         //         deleteButtonsCount++;
  54 |         //     }
  55 |         // }
  56 |         // expect(deleteButtonsCount).toBe(numberOfClicks);
  57 |
  58 |         // Verify that the number of delete buttons matches the number of clicks
  59 |         const deleteButtons = await addAndRenameTest.page.getByText('Delete');
  60 |         const deleteButtonsCount = await deleteButtons.count();
  61 |         expect(deleteButtonsCount).toBe(numberOfClicks);
  62 |
  63 |         // Verify that each Delete button is clickable
  64 |         for (let i = deleteButtonsCount - 1; i >= 0; i--) {
  65 |             //const deleteButton = deleteButtons.locator(`nth=${i}`);
  66 |             const deleteButton = deleteButtons.nth(i);
  67 |             expect(await deleteButton.isEnabled()).toBeTruthy();
  68 |             await addAndRenameTest.page.waitForTimeout(200);
  69 |             await deleteButton.click();
  70 |             expect(await deleteButton.isVisible()).toBeFalsy();
  71 |         }
  72 |
  73 |     })
  74 |
  75 |     test.afterAll(async () => {
  76 |         await addAndRenameTest.page.close();
  77 |     })
  78 | })
  79 |
```